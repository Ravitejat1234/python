{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "97b8fa03-fb37-416b-9227-d520ecf54dbc",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'python_csv' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 9\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mseaborn\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01msns\u001b[39;00m\n\u001b[0;32m      8\u001b[0m \u001b[38;5;66;03m# Load the data\u001b[39;00m\n\u001b[1;32m----> 9\u001b[0m customers_df \u001b[38;5;241m=\u001b[39m \u001b[43mpython_csv\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCustomers.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     10\u001b[0m products_df \u001b[38;5;241m=\u001b[39m python_csv(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mProducts.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     11\u001b[0m transactions_df \u001b[38;5;241m=\u001b[39m python_csv(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactions.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'python_csv' is not defined"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import silhouette_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load the data\n",
    "customers_df = python_csv(\"Customers.csv\")\n",
    "products_df = python_csv(\"Products.csv\")\n",
    "transactions_df = python_csv(\"Transactions.csv\")\n",
    "\n",
    "# 1. Data Preparation and Feature Engineering\n",
    "# Merge dataframes\n",
    "merged_df = pd.merge(customers_df, transactions_df, on=\"CustomerID\")\n",
    "merged_df = pd.merge(merged_df, products_df, on=\"ProductID\")\n",
    "\n",
    "# Calculate customer-level metrics\n",
    "customer_agg = merged_df.groupby('CustomerID').agg({\n",
    "    'TotalValue': 'sum',\n",
    "    'Quantity': 'sum',\n",
    "    'TransactionDate': 'max',\n",
    "    'ProductID': 'nunique' \n",
    "}).reset_index()\n",
    "customer_agg.rename(columns={'ProductID': 'NumUniqueProducts', 'TransactionDate': 'LastPurchaseDate'}, inplace=True)\n",
    "\n",
    "# Calculate recency\n",
    "max_purchase_date = customer_agg['LastPurchaseDate'].max()\n",
    "customer_agg['Recency'] = (max_purchase_date - customer_agg['LastPurchaseDate']).dt.days\n",
    "\n",
    "# Calculate customer age\n",
    "customer_agg['CustomerAge'] = (pd.to_datetime('today') - pd.to_datetime(customers_df['SignupDate'])).dt.days \n",
    "\n",
    "# Merge with customer demographics\n",
    "customer_agg = pd.merge(customer_agg, customers_df[['CustomerID', 'Region']], on=\"CustomerID\")\n",
    "\n",
    "# Select features for clustering\n",
    "features = ['TotalValue', 'Quantity', 'NumUniqueProducts', 'Recency', 'CustomerAge'] \n",
    "X = customer_agg[features]\n",
    "\n",
    "# 2. Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# 3. Determine Optimal Number of Clusters (Elbow Method)\n",
    "wcss = []\n",
    "for i in range(2, 11):\n",
    "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n",
    "    kmeans.fit(X_scaled)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "\n",
    "plt.plot(range(2, 11), wcss)\n",
    "plt.title('Elbow Method')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('WCSS')\n",
    "plt.show()\n",
    "\n",
    "# 4. Select the optimal number of clusters (e.g., based on the elbow point)\n",
    "n_clusters = 4  # Example\n",
    "\n",
    "# 5. Perform K-Means Clustering\n",
    "kmeans = KMeans(n_clusters=n_clusters, init='k-means++', random_state=42)\n",
    "X['Cluster'] = kmeans.fit_predict(X_scaled)\n",
    "\n",
    "# 6. Calculate Silhouette Score\n",
    "silhouette_avg = silhouette_score(X_scaled, kmeans.labels_)\n",
    "print(\"Silhouette Score:\", silhouette_avg)\n",
    "\n",
    "# 7. Visualize Clusters (Example: 2D scatter plot)\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(x='TotalValue', y='Recency', hue='Cluster', data=X)\n",
    "plt.title('Customer Segmentation')\n",
    "plt.xlabel('Total Value')\n",
    "plt.ylabel('Recency')\n",
    "plt.show()\n",
    "\n",
    "# 8. Analyze Cluster Characteristics\n",
    "print(\"Cluster Analysis:\")\n",
    "for i in range(n_clusters):\n",
    "    print(f\"Cluster {i}:\")\n",
    "    print(X[X['Cluster'] == i][features].describe())\n",
    "\n",
    "# Save results\n",
    "customer_agg.to_csv(\"CustomerSegments.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e8e64af-9548-426f-8248-5236f6bad344",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
